<script>
// Theme Extension Message Handler - Ana Store ƒ∞√ßin
console.log('üéß Theme store message listener loading...');

document.addEventListener('DOMContentLoaded', function() {
    console.log('üéØ Setting up Theme Extension message handler in main store');
    
    // Theme Extension'dan gelen mesajlarƒ± dinle
    window.addEventListener('message', function(event) {
        console.log('üì® Store received message:', event.data);
        
        if (event.data.type === 'CUSTOM_CONFIGURATOR_ADD_TO_CART') {
            handleConfiguratorAddToCart(event.data.data);
        }
    });
    
    async function handleConfiguratorAddToCart(config) {
        console.log('üõí Handling configurator add to cart in main store:', config);
        
        try {
            // Ana √ºr√ºn√ºn variant ID'sini al
            const productData = {{ product | json }};
            const firstVariantId = productData.variants[0].id;
            
            console.log('Product data:', productData);
            console.log('Using variant ID:', firstVariantId);
            
            // Shopify Cart API - doƒüru format (FormData)
            const formData = new FormData();
            formData.append('id', firstVariantId);
            formData.append('quantity', '1');
            formData.append('properties[Y√ºkseklik]', config.height + ' cm');
            formData.append('properties[Geni≈ülik]', config.width + ' cm');
            formData.append('properties[Materyal]', config.material);
            formData.append('properties[Fiyat]', config.price);
            formData.append('properties[√ñzel √úr√ºn]', 'Konfig√ºrat√∂r ile olu≈üturuldu');
            
            console.log('Adding to cart with variant ID:', firstVariantId);
            
            const response = await fetch('/cart/add.js', {
                method: 'POST',
                body: formData // FormData kullan, JSON deƒüil!
            });
            
            if (response.ok) {
                console.log('‚úÖ Added to cart successfully');
                window.location.href = '/cart';
            } else {
                console.error('‚ùå Cart add failed:', response.status);
                alert('Sepete eklenirken sorun olu≈ütu. L√ºtfen tekrar deneyin.');
            }
            
        } catch (error) {
            console.error('‚ùå Store message handler error:', error);
            alert('Baƒülantƒ± hatasƒ±: ' + error.message);
        }
    }
    
    console.log('‚úÖ Theme Extension message handler ready in main store');
});
</script>

<div id="block-{{ block.id }}" class="custom-product-configurator">
  <h3>{{ block.settings.title | default: "√ñzel √úr√ºn Konfig√ºrat√∂r√º" }}</h3>
  
  <form class="configurator-form">
    <div class="form-group">
      <label for="height-{{ block.id }}">Boy (cm):</label>
      <input type="number" id="height-{{ block.id }}" min="10" max="500" step="1" required>
    </div>
    
    <div class="form-group">
      <label for="width-{{ block.id }}">En (cm):</label>
      <input type="number" id="width-{{ block.id }}" min="10" max="500" step="1" required>
    </div>
    
    <div class="form-group">
      <label for="material-{{ block.id }}">Materyal:</label>
      <select id="material-{{ block.id }}" required>
        <option value="">Se√ßiniz...</option>
        <option value="wood">Ah≈üap - 25‚Ç∫/m¬≤</option>
        <option value="metal">Metal - 35‚Ç∫/m¬≤</option>
        <option value="pvc">PVC - 20‚Ç∫/m¬≤</option>
        <option value="glass">Cam - 45‚Ç∫/m¬≤</option>
      </select>
    </div>
  </form>
  
  <div class="price-display">
    <p><strong>Tahmini Fiyat: <span class="price">0‚Ç∫</span></strong></p>
    <p><small>Alan: <span class="area-info">0 m¬≤</span> | Materyal: <span class="material-info">Se√ßilmedi</span></small></p>
  </div>
  
  <button class="add-to-cart-btn" disabled>Sepete Ekle</button>
</div>

<style>
.custom-product-configurator {
  background: #f9f9f9;
  padding: 20px;
  border-radius: 8px;
  margin: 20px 0;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  font-weight: bold;
  margin-bottom: 5px;
}

.form-group input,
.form-group select {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.price-display {
  background: linear-gradient(135deg, #e8f4fd 0%, #f0f8ff 100%);
  padding: 20px;
  border-radius: 8px;
  margin: 20px 0;
  border: 2px solid #b3d7ff;
  text-align: center;
  transition: all 0.3s ease;
}

.price-display:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 91, 211, 0.15);
}

.price {
  font-size: 1.4em;
  font-weight: bold;
  color: #005bd3;
}

.area-info, .material-info {
  color: #666;
  font-weight: 500;
}

.add-to-cart-btn {
  background: #008060;
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 4px;
  cursor: pointer;
  width: 100%;
}

.add-to-cart-btn:disabled {
  background: #ccc;
  cursor: not-allowed;
}

/* Mevcut varyant se√ßiciyi gizle */
.product-form__variants,
.variant-picker,
[data-option-selector] {
  display: none !important;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Block-specific element se√ßiciler
  const blockId = '{{ block.id }}';
  const height = document.getElementById('height-' + blockId);
  const width = document.getElementById('width-' + blockId);
  const material = document.getElementById('material-' + blockId);
  const priceDisplay = document.querySelector('#block-' + blockId + ' .price-display');
  const priceSpan = document.querySelector('#block-' + blockId + ' .price');
  const areaSpan = document.querySelector('#block-' + blockId + ' .area-info');
  const materialInfoSpan = document.querySelector('#block-' + blockId + ' .material-info');
  const addBtn = document.querySelector('#block-' + blockId + ' .add-to-cart-btn');
  
  console.log('Product Configurator initialized for block:', blockId);
  console.log('Elements found:', { height, width, material, priceDisplay, priceSpan, addBtn });
  
  function calculatePrice() {
    console.log('Calculating price...');
    
    const h = parseInt(height?.value || 0);
    const w = parseInt(width?.value || 0);
    const mat = material?.value;
    
    console.log('Values:', { height: h, width: w, material: mat });
    
    // Alan hesaplama (her zaman g√∂ster)
    const area = (h * w) / 10000; // cm¬≤ to m¬≤
    
    // Materyal bilgisi g√ºncelle
    const materialNames = { 
      wood: 'Ah≈üap (25‚Ç∫/m¬≤)', 
      metal: 'Metal (35‚Ç∫/m¬≤)', 
      pvc: 'PVC (20‚Ç∫/m¬≤)', 
      glass: 'Cam (45‚Ç∫/m¬≤)' 
    };
    
    if (materialInfoSpan) {
      materialInfoSpan.textContent = mat ? materialNames[mat] : 'Se√ßilmedi';
    }
    
    // Alan bilgisi her zaman g√∂ster
    if (areaSpan) {
      if (h > 0 && w > 0) {
        areaSpan.textContent = area.toFixed(4) + ' m¬≤';
      } else {
        areaSpan.textContent = '0 m¬≤';
      }
    }
    
    // Fiyat hesaplama
    if (h > 0 && w > 0 && mat) {
      // T√ºm deƒüerler ge√ßerli - fiyat hesapla
      const prices = { wood: 25, metal: 35, pvc: 20, glass: 45 };
      const materialPrice = prices[mat] || 0;
      
      // Alan katsayƒ±sƒ± (Task 7 - tam backend ile uyumlu)
      let areaMultiplier = 1.0;
      if (area < 0.1) areaMultiplier = 1.5;        // 0-0.1 m¬≤ (k√º√ß√ºk)
      else if (area < 0.5) areaMultiplier = 1.2;   // 0.1-0.5 m¬≤ (orta)
      else if (area < 2) areaMultiplier = 1.0;     // 0.5-2 m¬≤ (standart)
      else if (area < 5) areaMultiplier = 0.9;     // 2-5 m¬≤ (b√ºy√ºk)
      else areaMultiplier = 0.8;                   // 5+ m¬≤ (√ßok b√ºy√ºk)
      
      // Toplam fiyat = Alan √ó Materyal fiyatƒ± √ó Alan katsayƒ±sƒ±
      const totalPrice = area * materialPrice * areaMultiplier;
      
      console.log('Full calculation:', { area, materialPrice, totalPrice });
      
      if (priceSpan) {
        priceSpan.textContent = totalPrice.toFixed(2) + '‚Ç∫';
      }
      if (addBtn) {
        addBtn.disabled = false;
      }
      
      console.log('Price updated to:', totalPrice.toFixed(2) + '‚Ç∫');
      
    } else if (h > 0 && w > 0 && !mat) {
      // Boy ve en var ama materyal yok
      if (priceSpan) {
        priceSpan.textContent = 'Materyal se√ßin';
      }
      if (addBtn) {
        addBtn.disabled = true;
      }
      
    } else if (mat && (!h || !w || h <= 0 || w <= 0)) {
      // Materyal var ama √∂l√ß√ºler eksik
      if (priceSpan) {
        priceSpan.textContent = 'Boy ve En girin';
      }
      if (addBtn) {
        addBtn.disabled = true;
      }
      
    } else {
      // Hi√ßbir ≈üey girilmemi≈ü
      if (priceSpan) {
        priceSpan.textContent = 'Deƒüerleri girin';
      }
      if (addBtn) {
        addBtn.disabled = true;
      }
    }
  }
  
  // Event listeners
  if (height) {
    height.addEventListener('input', function() {
      console.log('Height changed:', this.value);
      calculatePrice();
    });
  }
  
  if (width) {
    width.addEventListener('input', function() {
      console.log('Width changed:', this.value);
      calculatePrice();
    });
  }
  
  if (material) {
    material.addEventListener('change', function() {
      console.log('Material changed:', this.value);
      calculatePrice();
    });
  }
  
  if (addBtn) {
    addBtn.addEventListener('click', function() {
      console.log('Add to cart clicked');
      
      const config = {
        height: height?.value,
        width: width?.value,
        material: material?.value,
        price: priceSpan?.textContent,
        productId: '{{ product.id | default: "unknown" }}'
      };
      
      console.log('Sending config:', config);
      
      // Loading state
      const originalText = addBtn.textContent;
      addBtn.textContent = 'Ekleniyor...';
      addBtn.disabled = true;
      
      // Theme App Extension -> Ana App mesaj g√∂nder
      console.log('üì® Sending message to parent app:', config);
      
      // SADECE postMessage kullan - API call yapma!
      console.log('üì® Sending postMessage to parent window');
      
      // Ana store'a mesaj g√∂nder (her durumda)
      window.postMessage({
        type: 'CUSTOM_CONFIGURATOR_ADD_TO_CART',
        data: config,
        source: 'theme-app-extension'
      }, '*');
      
      // Ba≈üarƒ± mesajƒ± g√∂ster ve sepete y√∂nlendir
      addBtn.textContent = 'Eklendi! Sepete gidiliyor...';
      setTimeout(() => {
        window.location.href = '/cart';
      }, 2000);
      
      return; // Sadece postMessage kullan, API call yok!
    });
  }
  
  // ƒ∞lk hesaplama
  setTimeout(calculatePrice, 100);
});

// Theme Extension Ready - Simple postMessage approach
</script>

{% schema %}
{
  "name": "√ñzel √úr√ºn Konfig√ºrat√∂r√º",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Ba≈ülƒ±k",
      "default": "√ñzel √úr√ºn Konfig√ºrat√∂r√º"
    }
  ]
}
{% endschema %}